"""

13305 - 주유소
나란히 있는 마을이 있다.
각 마을마다 기름 값이 다르고, 맨 왼쪽 도시에서 맨 오른쪽 도시로 갈 때
최소의 비용을 계산해야한다.

완전탐색으로 풀기엔 입력값의 범위가 너무 크다. (거리가 무려 10억)
근데 잠깐
생각해보면, 어차피 처음 시작하는 마을에서는 반드시 거리만큼 충전을 해야한다.
그리고 이동한 후의 마을에서 남은 미터만큼 기름을 모두 채울때를 구해보고,
그 다음 마을에서 모두 채울 때를 구해보고, 그다다음 마을에서 모두 채울 때를 구해보며
순서대로 풀어나가면 풀리지 않을까?

"""

n = int(input()) # 도시의 개수
result = 0

length = list(map(int, input().split())) # 인접한 두 도시를 연결하는 도로의 길이
price = list(map(int, input().split())) # 주유소의 리터당 가격
tmp = price[0] # tmp에는 맨 왼쪽마을의 기름 값을 넣어두기


for i in range(1, n): # 도시의 개수만큼 반복문 실행
    result += tmp * length[i-1] # 1) 우선 이동해야하므로 주유소 값 * 다음 도시까지 길이
    if tmp > price[i]: # 만약 다음 도시의 기름값이 현재보다 싼 경우라면
        tmp = price[i] # 기름값을 갱신한다. (일단 이동하고 거기서 주유하기)

print(result)