# BOJ 1783 - 병든 나이트
# 2칸 위로, 1칸 오른쪽
# 1칸 위로, 2칸 오른쪽
# 1칸 아래로, 2칸 오른쪽
# 2칸 아래로, 1칸 오른쪽

# 방문한 칸의 수를 최대
# 이동 횟수가 4번보다 적지 않다면, 이동 방법을 모두 한 번씩 사용해야 한다. 이동 횟수가 4번보다 적은 경우(방문한 칸이 5개 미만)에는 이동 방법에 대한 제약이 없다.
# BFS DFS로 풀기엔 20억이라는 범위기에 불가

# 이동 횟수가 4번이기 위해(모든 이동 방법을 한 번씩 사용한 경우) 체스판은 최소 3X7크기여야 한다.

n, m = map(int, input().split())
if n == 1: # 높이가 1인 경우 1 출력
    ans = 1
elif n == 2: # 높이가 2인 경우
    ans = min(4, (m-1)//2 + 1) # 2칸마다 한 번 씩 이동하므로 2로 나눈다. (m+1)//2
elif m < 7: # 높이가 3 ~ 6인경우
    ans = min(4, m) # 매번 오른쪽 1칸씩 이동했을 것 (5 미만 시)
else: # 높이가 7 이상인 경우 오른쪽으로 2칸씩 이동하는 경우 1번씩 = 2, 그 이후 오른쪽 1칸씩 이동만 센다.
    ans = m - 2
print(ans)
